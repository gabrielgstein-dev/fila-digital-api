generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String           @id @default(cuid())
  name           String
  slug           String           @unique
  email         String?
  phone         String?
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  agents        Agent[]
  corporateUsers CorporateUser[]
  counters      Counter[]
  queues        Queue[]

  @@map("tenants")
}

model Queue {
  id             String    @id @default(cuid())
  name           String
  description    String?
  queueType      QueueType @default(GENERAL)
  isActive       Boolean   @default(true)
  capacity       Int       @default(100)
  avgServiceTime Int       @default(300)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  tenantId       String
  callLogs       CallLog[]
  tenant         Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tickets        Ticket[]

  @@map("queues")
}

model Ticket {
  id             String       @id @default(cuid())
  priority       Int          @default(1)
  status         TicketStatus @default(WAITING)
  clientName     String?
  clientPhone    String?
  clientEmail    String?
  estimatedTime  Int?
  calledAt       DateTime?
  completedAt    DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  queueId        String
  userId         String?
  myCallingToken String
  callLogs       CallLog[]
  queue          Queue        @relation(fields: [queueId], references: [id], onDelete: Cascade)
  user           User?        @relation("UserTickets", fields: [userId], references: [id])

  @@unique([queueId, myCallingToken])
  @@map("tickets")
}

model Agent {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String
  password    String?
  googleId    String?   @unique
  role        AgentRole @default(OPERADOR)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tenantId    String
  cpf         String    @unique
  isDefault   Boolean   @default(false)
  isProtected Boolean   @default(false)
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  callLogs    CallLog[]

  @@map("agents")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  googleId      String?  @unique
  picture       String?
  phone         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cpf           String?  @unique
  password      String?
  isDefault     Boolean  @default(false)
  isProtected   Boolean  @default(false)
  ticketHistory Ticket[] @relation("UserTickets")

  @@map("users")
}

model Counter {
  id        String    @id @default(cuid())
  name      String
  number    Int
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenantId  String
  callLogs  CallLog[]
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, number])
  @@map("counters")
}

model CallLog {
  id          String     @id @default(cuid())
  action      CallAction
  calledAt    DateTime   @default(now())
  serviceTime Int?
  ticketId    String
  queueId     String
  agentId     String
  counterId   String
  agent       Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)
  counter     Counter    @relation(fields: [counterId], references: [id], onDelete: Cascade)
  queue       Queue      @relation(fields: [queueId], references: [id], onDelete: Cascade)
  ticket      Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("call_logs")
}

enum QueueType {
  GENERAL
  PRIORITY
  VIP
}

enum TicketStatus {
  WAITING
  CALLED
  IN_SERVICE
  COMPLETED
  NO_SHOW
  CANCELLED
}

enum AgentRole {
  OPERADOR
  GERENTE
  GESTOR
  ADMINISTRADOR
}

enum CallAction {
  CALLED
  RECALLED
  SKIPPED
  COMPLETED
  NO_SHOW
}

model CorporateUser {
  id          String           @id @default(cuid())
  email       String           @unique
  name        String
  password    String?
  googleId    String?          @unique
  role        CorporateUserRole @default(OPERADOR)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  tenantId    String
  cpf         String           @unique
  phone       String?
  department  String?
  position    String?
  isDefault   Boolean          @default(false)
  isProtected Boolean          @default(false)
  tenant      Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  permissions CorporateUserPermission[]

  @@map("corporate_users")
}

model CorporateUserPermission {
  id              String        @id @default(cuid())
  corporateUserId String
  resource        String
  action          String
  granted         Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  corporateUser   CorporateUser @relation(fields: [corporateUserId], references: [id], onDelete: Cascade)

  @@unique([corporateUserId, resource, action])
  @@map("corporate_user_permissions")
}

enum CorporateUserRole {
  OPERADOR
  GERENTE
  GESTOR
  ADMINISTRADOR
}
