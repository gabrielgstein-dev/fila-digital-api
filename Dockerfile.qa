# Dockerfile para ambiente QA
FROM node:22-alpine AS base

# Instalar dependências do sistema
RUN apk add --no-cache libc6-compat dumb-init

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração do pnpm
COPY package.json pnpm-lock.yaml ./

# Instalar pnpm globalmente
RUN npm install -g pnpm

# Stage para instalar dependências
FROM base AS deps
RUN pnpm install --frozen-lockfile --prod=false

# Stage para build da aplicação
FROM base AS builder

# Copiar dependências instaladas
COPY --from=deps /app/node_modules ./node_modules

# Copiar código fonte
COPY . .

# Definir argumentos de build
ARG NODE_ENV=qa
ARG PORT=8080
ARG DATABASE_URL
ARG JWT_SECRET
ARG JWT_EXPIRES_IN=7d
ARG REDIS_URL
ARG CORS_ORIGIN
ARG WEBSOCKET_CORS_ORIGIN

# Definir variáveis de ambiente para build
ENV NODE_ENV=${NODE_ENV}
ENV PORT=${PORT}
ENV DATABASE_URL=${DATABASE_URL}
ENV JWT_SECRET=${JWT_SECRET}
ENV JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
ENV REDIS_URL=${REDIS_URL}
ENV CORS_ORIGIN=${CORS_ORIGIN}
ENV WEBSOCKET_CORS_ORIGIN=${WEBSOCKET_CORS_ORIGIN}

# Gerar Prisma Client
RUN npx prisma generate

# Build da aplicação
RUN pnpm run build

# Remover dependências de desenvolvimento
RUN pnpm prune --prod

# Stage final - runtime
FROM node:22-alpine AS runtime

# Instalar dependências do sistema
RUN apk add --no-cache libc6-compat dumb-init

# Criar usuário não-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Definir diretório de trabalho
WORKDIR /app

# Instalar pnpm
RUN npm install -g pnpm

# Copiar arquivos necessários do builder
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma

# Definir argumentos de build para runtime
ARG NODE_ENV=qa
ARG PORT=8080
ARG DATABASE_URL
ARG JWT_SECRET
ARG JWT_EXPIRES_IN=7d
ARG REDIS_URL
ARG CORS_ORIGIN
ARG WEBSOCKET_CORS_ORIGIN

# Definir variáveis de ambiente
ENV NODE_ENV=${NODE_ENV}
ENV PORT=${PORT}
ENV DATABASE_URL=${DATABASE_URL}
ENV JWT_SECRET=${JWT_SECRET}
ENV JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
ENV REDIS_URL=${REDIS_URL}
ENV CORS_ORIGIN=${CORS_ORIGIN}
ENV WEBSOCKET_CORS_ORIGIN=${WEBSOCKET_CORS_ORIGIN}

# Expor porta
EXPOSE ${PORT}

# Mudar para usuário não-root
USER nestjs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:${PORT}/api/v1 || exit 1

# Comando para iniciar a aplicação
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"] 